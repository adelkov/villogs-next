generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model babies {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  name               String               @db.VarChar(255)
  date_of_birth      String               @db.VarChar(255)
  baby_user          baby_user[]
  breast_feed_logs   breast_feed_logs[]
  diaper_change_logs diaper_change_logs[]
  logs               logs[]
  sleep_logs         sleep_logs[]
}

model baby_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  baby_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  babies     babies    @relation(fields: [baby_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "baby_user_baby_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "baby_user_user_id_foreign")

  @@index([baby_id], map: "baby_user_baby_id_foreign")
  @@index([user_id], map: "baby_user_user_id_foreign")
}

model breast_feed_logs {
  id         BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  baby_id    BigInt                @db.UnsignedBigInt
  started_at String                @db.VarChar(255)
  ended_at   String?               @db.VarChar(255)
  side       breast_feed_logs_side
  created_at DateTime?             @db.Timestamp(0)
  updated_at DateTime?             @db.Timestamp(0)
  babies     babies                @relation(fields: [baby_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "breast_feed_logs_baby_id_foreign")

  @@index([baby_id], map: "breast_feed_logs_baby_id_foreign")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model diaper_change_logs {
  id         BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  baby_id    BigInt                  @db.UnsignedBigInt
  type       diaper_change_logs_type
  started_at String                  @db.VarChar(255)
  created_at DateTime?               @db.Timestamp(0)
  updated_at DateTime?               @db.Timestamp(0)
  babies     babies                  @relation(fields: [baby_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "diaper_change_logs_baby_id_foreign")

  @@index([baby_id], map: "diaper_change_logs_baby_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model logs {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  baby_id       BigInt    @db.UnsignedBigInt
  loggable_type String    @db.VarChar(255)
  loggable_id   BigInt    @db.UnsignedBigInt
  user_id       BigInt    @db.UnsignedBigInt
  started_at    DateTime  @default(now()) @db.Timestamp(0)
  ended_at      DateTime? @db.Timestamp(0)
  babies        babies    @relation(fields: [baby_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "logs_baby_id_foreign")
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "logs_user_id_foreign")

  @@index([baby_id], map: "logs_baby_id_foreign")
  @@index([loggable_type, loggable_id], map: "logs_loggable_type_loggable_id_index")
  @@index([user_id], map: "logs_user_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model sleep_logs {
  baby_id    BigInt    @db.UnsignedBigInt
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  started_at String    @db.VarChar(255)
  ended_at   String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  babies     babies    @relation(fields: [baby_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sleep_logs_baby_id_foreign")

  @@index([baby_id], map: "sleep_logs_baby_id_foreign")
}

model users {
  id                BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  name              String      @db.VarChar(255)
  email             String      @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?   @db.Timestamp(0)
  password          String      @db.VarChar(255)
  remember_token    String?     @db.VarChar(100)
  created_at        DateTime?   @db.Timestamp(0)
  updated_at        DateTime?   @db.Timestamp(0)
  baby_user         baby_user[]
  logs              logs[]
}

enum diaper_change_logs_type {
  pee
  poop
  both
  empty
}

enum breast_feed_logs_side {
  left
  right
}
